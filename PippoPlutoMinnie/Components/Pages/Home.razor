@page "/"
@using System.Threading;
@using System.Web.WebPages;
@using Microsoft.AspNetCore.Html;
@using Microsoft.Web.Helpers;
@using Microsoft.AspNetCore.Mvc.Rendering;
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<script type="text/javascript" src="https://www.bing.com/api/maps/mapcontrol?key=AnLkqKRZ-5MSO4ahpO74W8otSdu7dkQdCcGaWwx0GNGDMgxPrWrHqbmcrCQw9lv2"></script>
<script type="text/javascript">
    var map;

    function GetMap() {
        map = new Microsoft.Maps.Map('#map', { 
            credentials: 'AnLkqKRZ-5MSO4ahpO74W8otSdu7dkQdCcGaWwx0GNGDMgxPrWrHqbmcrCQw9lv2'
        }); 
        map.setView({
            mapTypeId: Microsoft.Maps.MapTypeId.aerial,
            center: new Microsoft.Maps.Location(48.8584, 2.2945),
            zoom: 15
        });
    }  
        // Call the GetMap function when the page loads
    Microsoft.Maps.loadModule('Microsoft.Maps.Map', { callback: GetMap });
    
    
 </script>
 <script type="text/javascript">
    window.onload = function () {
        GetMap();
    };
</script>

<div style="width: 50%; height: 40px; background-color: red; margin: 10px; display: inline-block; box-sizing: border-box;"><h3 id="carica">50%</h3></div>   <!--Carica-->
<div style="width: 22%; height: 40px; background-color: green; margin: 10px; display: inline-block; box-sizing: border-box;"><h3 id="temperatura">50°</h3></div>    <!--Temperatura-->
<div style="width: 22%; height: 40px; background-color: blue; margin: 10px; display: inline-block; box-sizing: border-box;"><h3 id="orario">@time</h3></div> <!--Orario-->
<br>
<div style="width: 50%; height: 340px; background-color: purple; margin: 10px; display: inline-block; box-sizing: border-box;"></div> <!--Telecamera-->
<div style="width: 46%; height: 340px; background-color: orange; margin: 10px; display: inline-block; box-sizing: border-box;" id="map"></div>   <!--Maps-->
<br>
<div style="width: 50%; height: 140px; background-color: rgb(87, 66, 0); margin: 10px; display: inline-block; box-sizing: border-box;"></div>   <!--Log-->
<div style="width: 22%; height: 140px; background-color: rgb(255, 0, 225); margin: 10px; display: inline-block; box-sizing: border-box;"></div> <!--Giroscopio-->
<div style="width: 22%; height: 140px; background-color: rgb(195, 255, 0); margin: 10px; display: inline-block; box-sizing: border-box;"></div> <!--Info motori-->

@code
{
    static string time { get; set; } = DateTime.Now.ToShortTimeString();
    static string print="";
    static async Task<string> GetAsyncString(HttpClient httpClient, string url)
    {

        HttpResponseMessage response = await httpClient.GetAsync(url);
        var jsonResponse = await response.Content.ReadAsStringAsync();
        return jsonResponse;

        // Expected output:
        //   GET https://jsonplaceholder.typicode.com/todos/3 HTTP/1.1
        //   {
        //     "userId": 1,
        //     "id": 3,
        //     "title": "fugiat veniam minus",
        //     "completed": false
        //   }
    }

    static async Task<byte[]> GetAsyncBytes(HttpClient httpClient, string url)
    {

        HttpResponseMessage response = await httpClient.GetAsync(url);
        var jsonResponse = await response.Content.ReadAsByteArrayAsync();
        return jsonResponse;

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await jsRuntime.InvokeVoidAsync("GetMap");
        }
    }
    protected override void OnInitialized()
    {
        
        
        UpdateDateTime();
    }

    private void UpdateDateTime()
    {
        
        time = DateTime.Now.ToString("HH:mm:ss");
        StateHasChanged(); // Aggiorna l'interfaccia utente
        InvokeAsync(async () =>
        {
            await Task.Delay(1000); // Attendi un secondo
            UpdateDateTime(); // Richiama la funzione per aggiornare l'ora
        });
    }
}

