@page "/"
@using System.Threading;
@using System.Web.WebPages;
@using Microsoft.AspNetCore.Html;
@using Microsoft.Web.Helpers;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using System.Text.Json;
@layout NoMenuLayout;
@inject IJSRuntime jsRuntime;
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<script type="text/javascript" src="https://www.bing.com/api/maps/mapcontrol?key=AnLkqKRZ-5MSO4ahpO74W8otSdu7dkQdCcGaWwx0GNGDMgxPrWrHqbmcrCQw9lv2"></script>
<script type="text/javascript">
    var map;

    function GetMap() {
        map = new Microsoft.Maps.Map('#map', {
            credentials: 'AnLkqKRZ-5MSO4ahpO74W8otSdu7dkQdCcGaWwx0GNGDMgxPrWrHqbmcrCQw9lv2',
            showLabels: true
        });
        map.setView({
            mapTypeId: Microsoft.Maps.MapTypeId.aerial,
            center: new Microsoft.Maps.Location(48.8530, 2.3499),     //Da inserire tramite chiocciola
            zoom: 18

        });
        map.setOptions({
            enableHighDpi: true
        })
        map.setOptions({ disableZooming: true, disablePanning: true, disableMapTypeSelectorMouseOver: true, enableClickableLogo: false, showLocateMeButton: false});
        
    }
    var pin;
    function PinPush() { 
        var center = map.getCenter();
        
        //Create custom Pushpin
        pin = new Microsoft.Maps.Pushpin(center, {
            title: 'Drone',
            subTitle: 'PippoPlutoMinnie',
            text: '1'
        });
        
        //Add the pushpin to the map
        map.entities.push(pin);
    }
    function RemovePin() {
        map.entities.remove(pin);
    }
    function MovePin(location)
    {
        pin.setLocation(location);
    }
    function CenterMap()
    {

        MovePin(new Microsoft.Maps.Location(Number(@lat), Number(@longitude)));
        map.setView({
            mapTypeId: Microsoft.Maps.MapTypeId.aerial,
            center: new Microsoft.Maps.Location(Number(@lat), Number(@longitude)),     
            zoom: 18,
            labelOverlay: Microsoft.Maps.LabelOverlay.visible
        });
    }
    
    // Call the GetMap function when the page loads
    //Microsoft.Maps.loadModule('Microsoft.Maps.Map', { callback: GetMap });        Non viene eseguito in blazor, ma lo tengo per bellezza :)


</script>
<script type="text/javascript">
    window.onload = function () {
        GetMap();
    };
</script>

<body>

    <div class="grid-container">
        <div class="Sensor"></div>
        <div class="Temperature"></div>
        <div class="Hour" id="hour">@time</div>
        <div class="Camera"><img src="data:image/png;base64,@jsonInfo.Image" alt="Telecamera" /></div>
        <div class="Map" id="map"></div>
        <div class="Speed"></div>
        <div class="Height"></div>
        <div class="Pressure"></div>
    </div>

</body>
<style>
    .grid-container {
        color: white;
        vertical-align: middle;
        display: grid;
        grid-template-columns: auto auto auto auto auto auto auto auto;
        grid-template-rows: 120px 385px 120px;
        gap: 5px;
        background-color: #c8a2c8;
        padding: 5px;
    }

        .grid-container > div {
            background-color: black;
            text-align: center;
            text padding: 20px 0;
            font-size: 30px;
        }

    .Sensor {
        grid-column: 1 / 4;
    }

    .Temperature {
        grid-column: 4 / 7;
    }

    .Hour {
        grid-column: 7 / 9;
    }

    .Camera {
        grid-column: 1 / 5;
    }

    .Map {
        grid-column: 5 / 9;
    }

    .Speed {
        grid-column: 1/5;
    }

    .Height {
        grid-column: 5/7;
    }

    .Pressure {
        grid-column: 7/9;
    }
</style>


@code
{
    static string p ="";
    static string pinName = "Topolino";
    static string lat = "48.8584";  //cambio latitudine di prova
    static string longitude =  "2.2945";    //cambio longitudine di prova
    static string time { get; set; } = DateTime.Now.ToShortTimeString();
    static GestioneJSON jsonInfo = new GestioneJSON();
    static async Task<GestioneJSON?> GetAsyncJSON(HttpClient httpClient, string url)
    {
        HttpResponseMessage response = await httpClient.GetAsync(url);
        var jsonResponse = await response.Content.ReadAsStringAsync();
        GestioneJSON? message = JsonSerializer.Deserialize<GestioneJSON>(jsonResponse);
        return message;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)    //prova
        {
            await jsRuntime.InvokeVoidAsync("GetMap");
            await jsRuntime.InvokeVoidAsync("PinPush");
            await jsRuntime.InvokeVoidAsync("CenterMap"); //da eseguire con un timer, NO TASK DELAY

        }


    }

    protected override async Task OnInitializedAsync()
    {
        // var response = GetAsyncJSON(HttpSettings.siteUri, HttpSettings.clientPath);
        // jsonInfo = await response;
    }
    protected override void OnInitialized()
    {
        UpdateDateTime();
    }

    private void UpdateDateTime() //da rifare con timer
    {
        time = DateTime.Now.ToString("HH:mm:ss");
        
        StateHasChanged(); // Aggiorna l'interfaccia utente
        InvokeAsync(async () =>
        {
            
            await Task.Delay(1000); // Attendi un secondo

            UpdateDateTime(); // Richiama la funzione per aggiornare l'ora
        });
    }
}

