@page "/"
@using System.Threading;
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div style="width: 50%; height: 40px; background-color: red; margin: 10px; display: inline-block; box-sizing: border-box;"><h3 id="carica">50%</h3></div>   <!--Carica-->
<div style="width: 22%; height: 40px; background-color: green; margin: 10px; display: inline-block; box-sizing: border-box;"><h3 id="temperatura"></h3></div>    <!--Temperatura-->
<div style="width: 22%; height: 40px; background-color: blue; margin: 10px; display: inline-block; box-sizing: border-box;"><h3 id="orario">@time</h3></div> <!--Orario-->
<br>
<div style="width: 50%; height: 340px; background-color: purple; margin: 10px; display: inline-block; box-sizing: border-box;"></div> <!--Telecamera-->
<div style="width: 46%; height: 340px; background-color: orange; margin: 10px; display: inline-block; box-sizing: border-box;"><img src="http://maps.googleapis.com/maps/api/staticmap?center=48.8584,2.2945&zoom=11&size=200x200&sensor=false"></div>   <!--Maps-->
<br>
<div style="width: 50%; height: 140px; background-color: rgb(87, 66, 0); margin: 10px; display: inline-block; box-sizing: border-box;"></div>   <!--Log-->
<div style="width: 22%; height: 140px; background-color: rgb(255, 0, 225); margin: 10px; display: inline-block; box-sizing: border-box;"></div> <!--Giroscopio-->
<div style="width: 22%; height: 140px; background-color: rgb(195, 255, 0); margin: 10px; display: inline-block; box-sizing: border-box;"></div> <!--Info motori-->

@code
{
    static string time { get; set; } = DateTime.Now.ToShortTimeString();
    static string print="";
    static async Task<string> GetAsyncString(HttpClient httpClient, string url)
    {

        HttpResponseMessage response = await httpClient.GetAsync(url);
        var jsonResponse = await response.Content.ReadAsStringAsync();
        return jsonResponse;

        // Expected output:
        //   GET https://jsonplaceholder.typicode.com/todos/3 HTTP/1.1
        //   {
        //     "userId": 1,
        //     "id": 3,
        //     "title": "fugiat veniam minus",
        //     "completed": false
        //   }
    }

    static async Task<byte[]> GetAsyncBytes(HttpClient httpClient, string url)
    {

        HttpResponseMessage response = await httpClient.GetAsync(url);
        var jsonResponse = await response.Content.ReadAsByteArrayAsync();
        return jsonResponse;

        // Expected output:
        //   GET https://jsonplaceholder.typicode.com/todos/3 HTTP/1.1
        //   {
        //     "userId": 1,
        //     "id": 3,
        //     "title": "fugiat veniam minus",
        //     "completed": false
        //   }
    }

    // Expected output:
    //   GET https://jsonplaceholder.typicode.com/todos/3 HTTP/1.1
    //   {
    //     "userId": 1,
    //     "id": 3,
    //     "title": "fugiat veniam minus",
    //     "completed": false
    //   }

    protected override void OnInitialized()
    {
        UpdateDateTime();
    }

    private void UpdateDateTime()
    {
        time = DateTime.Now.ToString("HH:mm:ss");
        StateHasChanged(); // Aggiorna l'interfaccia utente
        InvokeAsync(async () =>
        {
            await Task.Delay(1000); // Attendi un secondo
            UpdateDateTime(); // Richiama la funzione per aggiornare l'ora
        });
    }
}

}
